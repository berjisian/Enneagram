angular.module('rtmap').directive('playback', function($compile) {	return {		restrict : 'EAC',		templateUrl : "app/lib/rtmap/directives/playback/playbackTemplate.html",		scope : {			controller: '=',			map: '='		},		controller : function($scope, $modal, $timeout, $filter, mapSrvc, rahnegarSrvc, playbackSrvc) {						/* ********************************* CONFIG ****************************/			$scope.Config = {					frequence: 128,					baseSpeed: 128,					speedUpCoefficient: 2, 					minSpeed: 2,					maxSpeed: 2048,					timeForwardSeconds: 300000 //TODO this should be a function base in intervalLength			};						/* ********************************* SET LAYERS ******************************/			var layers = [				new ol.layer.Vector({					name: 'trackpoint',					label : 'مسیرطی شده',					source: new ol.source.Vector()				}),				new ol.layer.Vector({					name: 'stopPoint',					label : 'نقاط توقف',					source: new ol.source.Vector()				}),				new ol.layer.Vector({					name: 'speedExceed',					label : 'سرعت غیرمجاز',					source: new ol.source.Vector()				}),				new ol.layer.Vector({					name: 'outOfRegion',					label : 'خارج از محدوده',					source: new ol.source.Vector()				})			];			layers.forEach(function(layer) {				$scope.map.getLayers().getArray().push(layer);							});			$scope.$parent.layerpanelController.refresh();						/* ********************************* DATA ******************************/			$scope.Data = {					searchQuery: {						timePicker: {							hstep: 1,							mstep: 15,							ismeridian: false,							from: new Date(),							to: new Date()						},						datePicker: {							from: new Date(),							to: new Date()						}					},					options: {						stopPoint: false,						speedExceed: false,						outOfRegion: false					},										infoMap: {},//map from vehicle uid to its current index and current point					trackingPointMap: {},//map from vehicle uid to its trackpoints (an array from trackpoints objects)										currentState: undefined,					mainInterval: undefined,					isLoading: false,										currentSpeed: $scope.Config.baseSpeed,					currentTime: 0,					selectedVehicle : undefined,										stepSlider: document.getElementById('slider-step'),										trackpointLayer: $scope.map.getOneLayer('trackpoint'),					speedExceedLayer: $scope.map.getOneLayer('speedExceed'),					outOfRegionLayer: $scope.map.getOneLayer('outOfRegion'),					stopPointLayer: $scope.map.getOneLayer('stopPoint')								};						/* ********************************* STATE *****************************/			$scope.State = {					initializing: {						name: 'init',						enter: function(){							$scope.Data.isLoading = true;							$scope.Data.trackpointLayer.clear();							$scope.Data.speedExceedLayer.clear();							$scope.Data.outOfRegionLayer.clear();							$scope.Data.stopPointLayer.clear();							$scope.$parent.Data.popup.hide();							//send request and initialize							playbackSrvc.getPlaybackData(createSendData()).then(function(response){								$scope.Data.currentTime = $scope.Data.searchQuery.startDate;								$scope.Func.changeVehicle($scope.controller.playList[0]);																//trackingPointList and infoMap								var data = [];								data = data.concat(response.data);								angular.forEach(data, function(vtp) {									if(vtp.trackpoints && vtp.trackpoints.length){										var startTrackpoint = vtp.trackpoints[0];										startTrackpoint.tp_time = $scope.Data.searchQuery.startDate;										vtp.trackpoints.unshift(startTrackpoint);										var endTrackpoint = vtp.trackpoints[vtp.trackpoints.length-1];										endTrackpoint.tp_time = $scope.Data.searchQuery.endDate;										vtp.trackpoints.push(endTrackpoint);																				$scope.Data.trackingPointMap[vtp.vehicle_uid] = vtp.trackpoints;										$scope.Data.infoMap[vtp.vehicle_uid] = {												currentIndex: 0,												currentPoint: vtp.trackpoints[0].point.coordinates										}										createLineFromTrackpoints(vtp.trackpoints, 'trackpoints');										if(vtp.options){											createLineFromTrackpoints(vtp.options.speed_exceed, 'speedExceed');											createLineFromTrackpoints(vtp.options.out_of_region, 'outOfRegion');//											createLineFromTrackpoints(vtp.options.stop_point, 'stopPoint');											createPointFromTrackpoints(vtp.options.stop_point, $scope.Data.stopPointLayer);										}									}								});																$scope.Data.isLoading = false;							});						},						execute: function() {			                //do nothing			            },			            play: function(){			            	$scope.Func.changeState($scope.State.playing);			            },			            pause: function(){			            	$scope.Func.changeState($scope.State.pausing);			            },			            stop: function(){			            	$scope.Func.changeState($scope.State.stopping);			            },			            exit: function(){			            	//do nothing			            }					},					playing: {						name: 'play',						enter: function(){							//do nothing						},						execute: function() {			                							$scope.Data.mainInterval = setInterval(function(){								$scope.$apply(function(){																		if($scope.Data.currentTime >= $scope.Data.searchQuery.endDate){										clearInterval($scope.Data.mainInterval);										$scope.Func.changeState($scope.State.pausing);									}																		angular.forEach($scope.Data.trackingPointMap, function(trackpointList, vehicleUid){																				var indexVehicle = $scope.Data.infoMap[vehicleUid].currentIndex;																				while($scope.Data.currentTime >= trackpointList[indexVehicle+1].tp_time){											$scope.Data.infoMap[vehicleUid].currentPoint = trackpointList[indexVehicle+1].point.coordinates;											$scope.Data.infoMap[vehicleUid].currentIndex = indexVehicle + 1;											indexVehicle = indexVehicle + 1;										}										$scope.Data.infoMap[vehicleUid].currentPoint[0] = trackpointList[indexVehicle].point.coordinates[0] + 												(trackpointList[indexVehicle+1].point.coordinates[0] - trackpointList[indexVehicle].point.coordinates[0]) * 												($scope.Data.currentTime - trackpointList[indexVehicle].tp_time) / 												(trackpointList[indexVehicle+1].tp_time - trackpointList[indexVehicle].tp_time);																				$scope.Data.infoMap[vehicleUid].currentPoint[1] = trackpointList[indexVehicle].point.coordinates[1] + 												(trackpointList[indexVehicle+1].point.coordinates[1] - trackpointList[indexVehicle].point.coordinates[1]) * 												($scope.Data.currentTime - trackpointList[indexVehicle].tp_time) / 												(trackpointList[indexVehicle+1].tp_time - trackpointList[indexVehicle].tp_time);																				updateVehiclePoint(vehicleUid, $scope.Data.infoMap[vehicleUid].currentPoint);																			});																		$scope.Data.currentTime = $scope.Data.currentTime + 1000*$scope.Data.currentSpeed/$scope.Config.baseSpeed;									$scope.Data.stepSlider.noUiSlider.set($scope.Data.currentTime);								});															},1000/$scope.Config.frequence);			            },			            play: function(){			            	//do nothing			            },			            pause: function(){			            	$scope.Func.changeState($scope.State.pausing);			            },			            stop: function(){			            	$scope.Func.changeState($scope.State.stopping);			            },			            exit: function(){			            	//do nothing			            }					},					pausing: {						name: 'pause',						enter: function(){							//do nothing						},						execute: function() {							clearInterval($scope.Data.mainInterval);			            },			            play: function(){			            	$scope.Func.changeState($scope.State.playing);			            },			            pause: function(){			            	//do nothing			            },			            stop: function(){			            	$scope.Func.changeState($scope.State.stopping);			            },			            exit: function(){			            	//do nothing			            }					},					stopping: {						name: 'stop',						enter: function(){							//do nothing						},						execute: function() {							clearInterval($scope.Data.mainInterval);							$scope.Data.currentSpeed = $scope.Config.baseSpeed;							$scope.Data.currentTime = $scope.Data.searchQuery.startDate;							angular.forEach($scope.Data.trackingPointMap, function(trackpointList, vehicleUid){								$scope.Data.infoMap[vehicleUid] = {										currentIndex: 0,										currentPoint: trackpointList[0].point.coordinates								}								updateVehiclePoint(vehicleUid, trackpointList[0].point.coordinates);							});							$scope.Data.stepSlider.noUiSlider.set($scope.Data.currentTime);			            },			            play: function(){			            	$scope.Func.changeState($scope.State.playing);			            },			            pause: function(){			            	$scope.Func.changeState($scope.State.pausing);			            },			            stop: function(){			            	//do nothing			            },			            exit: function(){			            	//do nothing			            }					}			};			/* ********************************* FUNCTION **************************/			$scope.Func = {					refresh: function(){						//TODO refresh in initializing state not working						$scope.Func.changeState($scope.State.initializing);					},					play: function() {				        $scope.Data.currentState.play();				    },				    pause: function() {				    	$scope.Data.currentState.pause();				    },				    stop: function() {				    	$scope.Data.currentState.stop();				    },				    speedUp: function(){				    	if($scope.Data.currentSpeed < $scope.Config.maxSpeed)				    		$scope.Data.currentSpeed = $scope.Data.currentSpeed * $scope.Config.speedUpCoefficient;				    },				    speedDown: function(){				    	if($scope.Data.currentSpeed > $scope.Config.minSpeed)				    		$scope.Data.currentSpeed = $scope.Data.currentSpeed / $scope.Config.speedUpCoefficient;				    },				    forward: function(){				    	var newTime;				    	if($scope.Data.currentTime + $scope.Config.timeForwardSeconds < $scope.Data.searchQuery.endDate)				    		newTime = $scope.Data.currentTime + $scope.Config.timeForwardSeconds;			    		else			    			newTime = $scope.Data.searchQuery.endDate;				    	$scope.Func.changeTime([newTime], 0);				    },				    backward: function(){				    	var newTime;				    	if($scope.Data.currentTime - $scope.Config.timeForwardSeconds > $scope.Data.searchQuery.startDate)				    		newTime = $scope.Data.currentTime - $scope.Config.timeForwardSeconds;			    		else			    			newTime = $scope.Data.searchQuery.startDate;				    	$scope.Func.changeTime([newTime], 0);				    },				    changeVehicle: function(vehicle){				    	$scope.Data.selectedVehicle = vehicle;				    },				    changeTime: function(values, handle){				    	//this function will call by time slider				    	//find suitable time and index after drag and drop slider				    	//TODO upgrade linear search to binary search				    	if($scope.Data.currentTime != parseInt(values[handle])){							$scope.Data.currentTime = parseInt(values[handle]);							angular.forEach($scope.Data.trackingPointMap, function(trackpointList, vehicleUid){								for ( var index = 0; index < trackpointList.length - 1; index++) {									if($scope.Data.currentTime > trackpointList[index].tp_time && $scope.Data.currentTime < trackpointList[index+1].tp_time){										$scope.Data.infoMap[vehicleUid].currentIndex = index + 1;									}								}							});						}				    },				    exit: function(){				    	//TODO clear browser memory				    	//TODO find better way to remove layers				    	$scope.map.getLayers().getArray().splice(5,$scope.map.getLayers().getArray().length);				    	$scope.$parent.layerpanelController.refresh();				    	$scope.controller.closeCallbackFn();				    	$scope.$parent.Data.popup.hide();				    },				    changeState: function(state) {			        	if($scope.Data.currentState)							$scope.Data.currentState.exit();			        	$scope.Data.currentState = state;			        	$scope.Data.currentState.enter();			        	$scope.Data.currentState.execute();				    }			};						/* ********************************* AUXILIARY **************************/			var createSendData = function(){				var sendData = {					start_date : '',					end_date : '',					vehicle_uid_list: [],					options: []				}, fromM, toM, from, to;				fromM = $scope.Data.searchQuery.datePicker.from.setMinutes($scope.Data.searchQuery.timePicker.from.getMinutes());				toM = $scope.Data.searchQuery.datePicker.to.setMinutes($scope.Data.searchQuery.timePicker.to.getMinutes());				sendData.start_date += new Date(fromM).setHours($scope.Data.searchQuery.timePicker.from.getHours());				sendData.end_date += new Date(toM).setHours($scope.Data.searchQuery.timePicker.to.getHours());				angular.forEach($scope.controller.playList, function(vehicle) {					sendData.vehicle_uid_list.push(vehicle.uid);						       				});								$scope.Data.searchQuery.startDate = parseInt(sendData.start_date);				$scope.Data.searchQuery.endDate = parseInt(sendData.end_date);								$scope.Data.stepSlider.noUiSlider.updateOptions({					start: [ $scope.Data.searchQuery.startDate ],					range: {						'min': [  parseInt($scope.Data.searchQuery.startDate) ],						'max': [ parseInt($scope.Data.searchQuery.endDate) ]					}				});								if($scope.Data.options.stopPoint)					sendData.options.push('stop_point');				if($scope.Data.options.speedExceed)					sendData.options.push('speed_exceed');				if($scope.Data.options.outOfRegion)					sendData.options.push('out_of_region');				return sendData;			};			var createLineFromTrackpoints = function(trackpointList, type){				var line, style, layer;				if(trackpointList && trackpointList.length){					if(type !== 'trackpoints'){						if(type === 'outOfRegion'){							style = new ol.style.Style({								stroke: new ol.style.Stroke({									color: 'orange',									width: 3								})							});							layer = $scope.Data.outOfRegionLayer;						}else{							style = new ol.style.Style({								stroke: new ol.style.Stroke({									color: 'red',									width: 3								})							});							layer = $scope.Data.speedExceedLayer;						}						trackpointList.forEach(function(item){							line = [];							if(item.trackpoints.length){								item.trackpoints.forEach(function(trackPoint){									line.push(trackPoint.point.coordinates);								});							}							mapSrvc.createLine(layer, {coords:line, style: style});						});					}else{						line = [];						style = new ol.style.Style({							stroke: new ol.style.Stroke({								color: 'green',								width: 3							})						});						trackpointList.forEach(function(trackPoint){							line.push(trackPoint.point.coordinates);						});						mapSrvc.createPoint($scope.Data.trackpointLayer, {							coords: trackpointList[0].point.coordinates, 							style: mapSrvc.createPointStyle('app/lib/rtmap/assets/img/playback/start-point.png')						});						mapSrvc.createPoint($scope.Data.trackpointLayer, {							coords: trackpointList[trackpointList.length-1].point.coordinates, 							style: mapSrvc.createPointStyle('app/lib/rtmap/assets/img/playback/end-point.png')						});						mapSrvc.createLine($scope.Data.trackpointLayer, {coords:line, style: style});					}				}				$scope.map.updateSize();			};			var createPointFromTrackpoints = function(trackpointList, layer) {				var img = 'app/lib/rtmap/assets/img/playback/stop-point.png',					pointStyle = mapSrvc.createPointStyle(img);					trackpointList.forEach(function(tp){						if(tp.trackpoints.length){							tp.trackpoints.forEach(function (item){								mapSrvc.createPoint(layer, {									coords: item.point.coordinates,									uid: item.vehicle_uid,									style: pointStyle,									data: item,									entityType: 'stopPoint'								});																												});						}					});			};			var updateVehiclePoint = function(vehicleUid, coords){				var feature = $scope.Data.trackpointLayer.getFeatureById(vehicleUid);				var vehicleImage = 'app/lib/rtmap/assets/img/playback/vehicle-playback.png';				if($scope.Data.selectedVehicle.uid == vehicleUid)					vehicleImage = 'app/lib/rtmap/assets/img/playback/active-vehicle-playback.png';				if(feature){					var geo = feature.getGeometry();					geo.setCoordinates(coords);					geo.transform('EPSG:4326', 'EPSG:3857');					feature.setGeometry(geo);					feature.setStyle(mapSrvc.createPointStyle(vehicleImage));				}else{					mapSrvc.createPoint($scope.Data.trackpointLayer, {						coords: coords,						uid: vehicleUid,						style: mapSrvc.createPointStyle(vehicleImage)					});				}				$scope.map.updateSize();			}			var initialSlider = function(){				noUiSlider.create($scope.Data.stepSlider, {					start: [0],					step: 1000,					connect: 'lower',					range: {						'min': [0],						'max': [1000]					}				});				$scope.Data.stepSlider.noUiSlider.on('update', $scope.Func.changeTime);			}						initialSlider();					},		link : function(scope, element, attrs, ctrls) {		}	};});